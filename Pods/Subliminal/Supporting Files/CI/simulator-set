#!/bin/bash

#  For details and documentation:
#  http://github.com/inkling/Subliminal
#
#  Copyright 2013-2014 Inkling Systems, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#


# `simulator-set` sets various properties of the iOS Simulator 
# and optionally resets the Simulator's content and settings.
# Execute `simulator-set` with no arguments to print usage.

print_usage_and_fail () {
    echo """
usage: simulator-set [--device <device>] [--version <sdk_version>] [--reset]

    -device <device>        A device type like \"iPhone\".
                            Acceptable types are listed in the iOS Simulator's 
                            \"Hardware\" -> \"Device\" menu.

    -version <sdk_version>  A string like \"5.1\" specifying the simulator SDK 
                            version to use.

                            Note that the iOS Simulator does not accept certain 
                            combinations of device type and SDK, 
                            e.g. \"iPhone Retina (4-inch)\" and \"5.1\".

    --reset                 Deletes all applications from, and resets the settings 
                            of, the SDK specified by \`-version\` (if \`--version\`
                            is specified) or the current SDK in use by the simulator
                            (if \`--version\` is not specified).
    """
    exit 1
}

# If we were invoked with no arguments, just print usage and exit
if [[ -z $1 ]]; then
    print_usage_and_fail
fi


### Parse arguments

while :
do
case $1 in
    --reset)
        RESET=true
        shift 1;;

    # Set argument, wait for value
    --device|--version)
        if [[ -n "$CURRENT_ARG" ]]; then
            echo "Error: Missing value for argument \"$CURRENT_ARG\""
            print_usage_and_fail
        fi
        # Variables are capitalized in this script
        CURRENT_ARG=`echo ${1#--} | tr [[:lower:]] [[:upper:]]`
        shift 1;;

    -*) 
        echo "Error: Unrecognized argument \"$1\""
        print_usage_and_fail;;

    # Set value for argument (unless end of command)
    *)
        if [[ -n "$1" ]]; then
            if [[ -z "$CURRENT_ARG" ]]; then
                echo "Error: Value \"$1\" is missing argument"
                print_usage_and_fail
            else
                eval $CURRENT_ARG=\"$1\"
                unset CURRENT_ARG;
            fi
        else
            # end of command
            break
        fi
        shift 1;;
esac
done

# We reached the end of the command while still expecting an argument
if [[ -n "$CURRENT_ARG" ]]; then
    echo "Error: Missing value for argument \"$CURRENT_ARG\""
    print_usage_and_fail
fi


### Kill the Simulator
killall "iPhone Simulator" 2> /dev/null
sleep 1.0


### Set properties

## Device
# If the device type contains punctuation, it needs to be single-quoted to be written into the plist
# but we only quote it if necessary, because the simulator rejects e.g. "'iPhone'"
SAFE_DEVICE=`[[ "$DEVICE" =~ [[:punct:]] ]] && echo "'$DEVICE'" || echo "$DEVICE"`
defaults write com.apple.iphonesimulator SimulateDevice "$SAFE_DEVICE"

## Version
if [[ -n "$VERSION" ]]; then
    # Set new SDK root
    # The quoting of "xcode-select" is just so that "select" doesn't mess up this file's syntax highlighting
    SDK_ROOT=`find "$('xcode-select' -print-path)" -type d -iname "iphonesimulator$VERSION.sdk"`
    if [[ -z "$SDK_ROOT" ]]; then
        echo "Error: Simulator SDK $VERSION not found."
        exit 1
    fi
    defaults write com.apple.iphonesimulator currentSDKRoot "$SDK_ROOT"
fi


### Reset the Simulator's content and settings

if [[ -n "$RESET" ]] && $RESET; then
    # Determine the SDK version e.g. "5.1" used by the simulator
    SDK_ROOT=`defaults read com.apple.iphonesimulator currentSDKRoot`
    SDK=`echo "$SDK_ROOT" | perl -pe 's|.*iphonesimulator(.+)\.sdk|$1|i'`

    # Delete the `Application Support` directory for this SDK version,
    # which will erase both the content and settings for this version.
    # The Simulator will recreate this support directory when relaunched below.
    
    # There may be multiple support directories for this SDK version,
    # e.g. 7.0, 7.0.3, 7.0.3-64 --we just delete them all.
    # We can't quote the directory prefix or we'll disable globbing,
    # so prevent splitting by unsetting IFS.
    OLD_IFS="$IFS"; unset IFS
    SUPPORT_DIRS=`echo $HOME/Library/Application\ Support/iPhone\ Simulator/$SDK* | perl -pe "s| /|\\n/|g"`
    while read -r dir; do
        rm -rf "$dir"
    done <<< "$SUPPORT_DIRS"
    IFS="$OLD_IFS"
fi


### Restart the Simulator

# Make sure to open the simulator corresponding to the current dev toolchain
# The quoting of "xcode-select" is just so that "select" doesn't mess up this file's syntax highlighting
SIMULATOR_PATH=`find "$('xcode-select' -print-path)" -name "iPhone Simulator.app"`
open "$SIMULATOR_PATH"
sleep 2.0
