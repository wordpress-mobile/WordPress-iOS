#!/usr/bin/python

#  For details and documentation:
#  http://github.com/inkling/Subliminal
#
#  Copyright 2013-2014 Inkling Systems, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  This script reads an integration test results plist file of the type
#  generated by the instruments command line tool and produces an XML
#  document that can be interpreted by junit.

import plistlib
import re
import datetime
import xml.etree.cElementTree as ET
from xml.dom import minidom
from optparse import OptionParser

def main(inputPath, outputPath):
    plist = plistlib.readPlist(inputPath)
    samples = plist['All Samples']
    root = ET.Element("testsuites")

    testSuite = None
    firstTestCase = None
    currentTestCase = None
    errorOccurredInTestSetUp = False
    for sample in samples:
        message = sample['Message']
        logType = sample['LogType']
        logSubtype = sample['Type']

        ## Errors
        # When `UIALogger.logFail()` is called, UIAutomation marks the message 
        # previously logged using `UIALogger.logStart()` as of "LogType" == "Error", but with "Type" == 4, 
        # vs. messages logged with `UIALogger.logError()` which have "LogType" == "Error" but "Type" == 3
        if (logType == "Error" and logSubtype == 3):
            # log the error under the current test case, 
            # or under test cases created to represent test set-up or tear-down
            # (for clarity, also because `testsuite` elements 
            # may not themselves contain failures or errors)
            erroringTestCase = currentTestCase
            if (erroringTestCase is None):
                erroringTestCase = ET.SubElement(testSuite, "testcase")
                # If we haven't executed any test cases yet, 
                # then the error must have occurred in set-up;
                # if we've already had an error in set-up, then the error must be in tear-down.
                # Checking `firstTestCase is None` is not sufficient
                # because when there's an error in set-up, the test cases are be skipped.
                errorCaseName = ""
                if (firstTestCase is None and not errorOccurredInTestSetUp):
                    errorCaseName = "setUpTest"
                    errorOccurredInTestSetUp = True
                else:
                    errorCaseName = "tearDownTest"
                erroringTestCase.set("name", errorCaseName)

            errorType = "error" if re.match('^.*: Unexpected exception occurred', message) else "failure"
            error = ET.SubElement(erroringTestCase, errorType)
            error.set("message", message)
            continue

        ## Test suites
        match = re.match('^Test "(.+)" started', message)
        if (match is not None):
            # clear test suite state
            firstTestCase = None
            currentTestCase = None
            errorOccurredInTestSetUp = False

            testSuite = ET.SubElement(root, "testsuite")
            testSuiteName = match.group(1)
            testSuite.set("name", testSuiteName)
            continue

        ## Test cases
        # NOTE: Don't change the order of "failed unexpectedly" and "failed" or
        # the regular expression matcher will always choose "failed" instead of
        # "failed unexpectedly."
        match = re.match('^Test case "\-\[.+ (.+)\]" (started|passed|failed\ unexpectedly|failed)', message)
        if (match is not None):
            testCaseName = match.group(1)
            action = match.group(2)
            if (action == "started"):
                case = ET.SubElement(testSuite, "testcase")
                case.set("name", testCaseName)
                currentTestCase = case
                if (firstTestCase is None): firstTestCase = case
            else:
                currentTestCase = None
            continue

        ## Uncaught exceptions (to be logged as test/test case errors)
        match = re.match('^Uncaught exception occurred during (?:test case "\-\[.+ .+\]"|test ".+"): \*\*\*(.+)\*\*\*(?: for reason: (.+))?', message)
        if (match is not None):
            # even if the error occurred at the test level, 
            # we must still create a test case to report the error
            # see the "Errors" section above
            erroringTestCase = currentTestCase
            if (erroringTestCase is None):
                erroringTestCase = ET.SubElement(testSuite, "testcase")
                erroringTestCase.set("name", "unknownLocation")

            exceptionName = match.group(1)
            exceptionReason = match.group(2);
            exceptionMessage = "Uncaught exception occurred: ***%s***" % exceptionName
            if (exceptionReason is not None):
                exceptionMessage += " for reason: %s" % exceptionReason
            error = ET.SubElement(erroringTestCase, "error");
            error.set("message", exceptionMessage)
            continue

    tree = ET.ElementTree(root)
    tree.write(outputPath)

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-i', '--input-file', action='store', dest='inputPath', metavar='foo.plist', help='input filepath')
    parser.add_option('-o', '--output-file', action='store', dest='outputPath', metavar='foo.xml', help='output filepath')
    (options, args) = parser.parse_args()
    if (options.inputPath is None or options.outputPath is None):
        parser.print_help()
        exit(1)

    main(options.inputPath, options.outputPath)
