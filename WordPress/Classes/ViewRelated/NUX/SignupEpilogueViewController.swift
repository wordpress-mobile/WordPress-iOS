import SVProgressHUD
import WordPressAuthenticator


class SignupEpilogueViewController: UIViewController {

    // MARK: - Public Properties

    var credentials: AuthenticatorCredentials?
    var socialService: SocialService?

    /// Closure to be executed upon tapping the continue button.
    ///
    var onContinue: (() -> Void)?

    // MARK: - Outlets

    @IBOutlet var doneButton: UIButton!

    // MARK: - Private Properties

    private var updatedDisplayName: String?
    private var updatedPassword: String?
    private var updatedUsername: String?
    private var epilogueUserInfo: LoginEpilogueUserInfo?
    private var displayNameAutoGenerated: Bool = false
    private var changesMade = false

    /// Constraints on the table view container.
    /// Used to adjust the width on iPad.
    @IBOutlet var tableViewLeadingConstraint: NSLayoutConstraint!
    @IBOutlet var tableViewTrailingConstraint: NSLayoutConstraint!
    private var defaultTableViewMargin: CGFloat = 0

    // MARK: - View

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .basicBackground
        defaultTableViewMargin = tableViewLeadingConstraint.constant
        configureDoneButton()
        setTableViewMargins(forWidth: view.frame.width)
        WordPressAuthenticator.track(.signupEpilogueViewed, properties: tracksProperties())
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: false)
    }

    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        setTableViewMargins(forWidth: size.width)
    }

    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        setTableViewMargins(forWidth: view.frame.width)
    }

    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return UIDevice.isPad() ? .all : .portrait
    }

    // MARK: - Navigation

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        super.prepare(for: segue, sender: sender)
        if let vc = segue.destination as? SignupEpilogueTableViewController {
            vc.credentials = credentials
            vc.socialService = socialService
            vc.dataSource = self
            vc.delegate = self
        }

        if let vc = segue.destination as? SignupUsernameViewController {
            vc.currentUsername = updatedUsername ?? epilogueUserInfo?.username
            vc.displayName = updatedDisplayName ?? epilogueUserInfo?.fullName
            vc.delegate = self

            // Empty Back Button
            navigationItem.backBarButtonItem = UIBarButtonItem(title: String(), style: .plain, target: nil, action: nil)
        }
    }

}

// MARK: - SignupEpilogueTableViewControllerDataSource

extension SignupEpilogueViewController: SignupEpilogueTableViewControllerDataSource {
    var customDisplayName: String? {
        return updatedDisplayName
    }

    var password: String? {
        return updatedPassword
    }

    var username: String? {
        return updatedUsername
    }
}

// MARK: - SignupEpilogueTableViewControllerDelegate

extension SignupEpilogueViewController: SignupEpilogueTableViewControllerDelegate {

    func displayNameUpdated(newDisplayName: String) {
        updatedDisplayName = newDisplayName
        displayNameAutoGenerated = false
    }

    func displayNameAutoGenerated(newDisplayName: String) {
        updatedDisplayName = newDisplayName
        displayNameAutoGenerated = true
    }

    func passwordUpdated(newPassword: String) {
        updatedPassword = newPassword.isEmpty ? nil : newPassword
    }

    func usernameTapped(userInfo: LoginEpilogueUserInfo?) {
        epilogueUserInfo = userInfo
        performSegue(withIdentifier: SignupUsernameViewController.classNameWithoutNamespaces(), sender: self)
        WordPressAuthenticator.track(.signupEpilogueUsernameTapped, properties: self.tracksProperties())
    }
}

// MARK: - Private Extension

private extension SignupEpilogueViewController {

    func configureDoneButton() {
        doneButton.setTitle(ButtonTitle.title, for: .normal)
        doneButton.accessibilityIdentifier = ButtonTitle.accessibilityId
    }

    func setTableViewMargins(forWidth viewWidth: CGFloat) {

        guard traitCollection.horizontalSizeClass == .regular &&
            traitCollection.verticalSizeClass == .regular else {
                tableViewLeadingConstraint.constant = defaultTableViewMargin
                tableViewTrailingConstraint.constant = defaultTableViewMargin
                return
        }

        let marginMultiplier = UIDevice.current.orientation.isLandscape ?
            TableViewMarginMultipliers.ipadLandscape :
            TableViewMarginMultipliers.ipadPortrait

        let margin = viewWidth * marginMultiplier

        tableViewLeadingConstraint.constant = margin
        tableViewTrailingConstraint.constant = margin
    }

    @IBAction func doneButtonPressed() {
        saveChanges()
    }

    func saveChanges() {
        if let newUsername = updatedUsername {
            SVProgressHUD.show(withStatus: HUDMessages.changingUsername)
            changeUsername(to: newUsername) {
                self.updatedUsername = nil
                self.saveChanges()
            }
        } else if let newDisplayName = updatedDisplayName {
            // If the display name is not auto generated, then the user changed it.
            // So we need to show the HUD to the user.
            if !displayNameAutoGenerated {
                SVProgressHUD.show(withStatus: HUDMessages.changingDisplayName)
            }
            changeDisplayName(to: newDisplayName) {
                self.updatedDisplayName = nil
                self.saveChanges()
            }
        } else if let newPassword = updatedPassword, !newPassword.isEmpty {
            SVProgressHUD.show(withStatus: HUDMessages.changingPassword)
            changePassword(to: newPassword) { success, error in
                if success {
                    self.updatedPassword = nil
                    self.saveChanges()
                } else {
                    self.showPasswordError(error)
                }
            }
        } else {
            if !changesMade {
                WordPressAuthenticator.track(.signupEpilogueUnchanged, properties: tracksProperties())
            }
            self.refreshAccountDetails() {
                SVProgressHUD.dismiss()
                self.dismissEpilogue()
            }
        }
        changesMade = true
    }

    func changeUsername(to newUsername: String, finished: @escaping (() -> Void)) {
        guard newUsername != "" else {
            finished()
            return
        }

        let context = ContextManager.sharedInstance().mainContext
        let accountService = AccountService(managedObjectContext: context)
        guard let account = accountService.defaultWordPressComAccount(),
            let api = account.wordPressComRestApi else {
                navigationController?.popViewController(animated: true)
                return
        }

        let settingsService = AccountSettingsService(userID: account.userID.intValue, api: api)
        settingsService.changeUsername(to: newUsername, success: {
            WordPressAuthenticator.track(.signupEpilogueUsernameUpdateSucceeded, properties: self.tracksProperties())
            finished()
        }) {
            WordPressAuthenticator.track(.signupEpilogueUsernameUpdateFailed, properties: self.tracksProperties())
            finished()
        }
    }

    func changeDisplayName(to newDisplayName: String, finished: @escaping (() -> Void)) {
        let context = ContextManager.sharedInstance().mainContext
        guard let defaultAccount = AccountService(managedObjectContext: context).defaultWordPressComAccount(),
            let restApi = defaultAccount.wordPressComRestApi else {
                finished()
                return
        }

        let accountSettingService = AccountSettingsService(userID: defaultAccount.userID.intValue, api: restApi)

        accountSettingService.updateDisplayName(newDisplayName) { (success, _) in
            let event: WPAnalyticsStat = success ? .signupEpilogueDisplayNameUpdateSucceeded : .signupEpilogueDisplayNameUpdateFailed
            WordPressAuthenticator.track(event, properties: self.tracksProperties())

            finished()
        }
    }

    func changePassword(to newPassword: String, finished: @escaping (_ success: Bool, _ error: Error?) -> Void) {

        let context = ContextManager.sharedInstance().mainContext

        guard let defaultAccount = AccountService(managedObjectContext: context).defaultWordPressComAccount(),
            let restApi = defaultAccount.wordPressComRestApi else {
                finished(false, nil)
                return
        }

        let accountSettingService = AccountSettingsService(userID: defaultAccount.userID.intValue, api: restApi)

        accountSettingService.updatePassword(newPassword) { (success, error) in
            if success {
                WordPressAuthenticator.track(.signupEpiloguePasswordUpdateSucceeded, properties: self.tracksProperties())
            } else {
                WordPressAuthenticator.track(.signupEpiloguePasswordUpdateFailed, properties: self.tracksProperties())
            }

            finished(success, error)
        }
    }

    func dismissEpilogue() {

        // Reset the nav style so the nav bar has the WP style, not the Auth style.
        WPStyleGuide.configureNavigationAppearance()

        guard let onContinue = self.onContinue else {
            self.navigationController?.dismiss(animated: true)
            return
        }

        onContinue()
    }

    func refreshAccountDetails(finished: @escaping () -> Void) {
        let context = ContextManager.sharedInstance().mainContext
        let service = AccountService(managedObjectContext: context)
        guard let account = service.defaultWordPressComAccount() else {
            self.dismissEpilogue()
            return
        }
        service.updateUserDetails(for: account, success: { () in
            finished()
        }, failure: { _ in
            finished()
        })
    }

    func showPasswordError(_ error: Error? = nil) {
        let errorMessage = error?.localizedDescription ?? HUDMessages.changePasswordGenericError
        SVProgressHUD.showError(withStatus: errorMessage)
    }

    func tracksProperties() -> [AnyHashable: Any] {
        let source: String = {
            guard let service = socialService else {
                return "email"
            }
            switch service {
            case .google:
                return "google"
            case .apple:
                return "apple"
            }
        }()

        return ["source": source]
    }

    enum TableViewMarginMultipliers {
        static let ipadPortrait: CGFloat = 0.1667
        static let ipadLandscape: CGFloat = 0.25
    }

    enum ButtonTitle {
        static let title = NSLocalizedString("Done", comment: "Button text on site creation epilogue page to proceed to My Sites.")
        // TODO: change UI Test when change this
        static let accessibilityId = "Done Button"
    }

    enum HUDMessages {
        static let changingDisplayName = NSLocalizedString("Changing display name", comment: "Shown while the app waits for the display name changing web service to return.")
        static let changingUsername = NSLocalizedString("Changing username", comment: "Shown while the app waits for the username changing web service to return.")
        static let changingPassword = NSLocalizedString("Changing password", comment: "Shown while the app waits for the password changing web service to return.")
        static let changePasswordGenericError = NSLocalizedString("There was an error changing the password", comment: "Text displayed when there is a failure changing the password.")
    }

}

extension SignupEpilogueViewController: SignupUsernameViewControllerDelegate {
    func usernameSelected(_ username: String) {
        if username.isEmpty || username == epilogueUserInfo?.username {
            updatedUsername = nil
        } else {
            updatedUsername = username
        }
    }
}

// MARK: - User Defaults

extension UserDefaults {
    var quickStartWasDismissedPermanently: Bool {
        get {
            return bool(forKey: #function)
        }
        set {
            set(newValue, forKey: #function)
        }
    }
}
