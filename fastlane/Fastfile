# frozen_string_literal: true

default_platform(:ios)
fastlane_require 'xcodeproj'
fastlane_require 'dotenv'
fastlane_require 'open-uri'
fastlane_require 'git'

UI.user_error!('Please run fastlane via `bundle exec`') unless FastlaneCore::Helper.bundler?

# Paths that are re-used across multiple lanes
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
WORKSPACE_PATH = File.join(PROJECT_ROOT_FOLDER, 'WordPress.xcworkspace')
DERIVED_DATA_PATH = File.join(PROJECT_ROOT_FOLDER, 'DerivedData')
BUILD_PRODUCTS_PATH = File.join(PROJECT_ROOT_FOLDER, 'Artifacts')

# Env file paths to load
ENV_FILE_NAME = '.wpios-env.default'
USER_ENV_FILE_PATH = File.join(Dir.home, ENV_FILE_NAME)
SECRETS_DIR = File.join(Dir.home, '.configure', 'wordpress-ios', 'secrets')
PROJECT_ENV_FILE_PATH = File.join(SECRETS_DIR, 'project.env')
APP_STORE_CONNECT_KEY_PATH = File.join(SECRETS_DIR, 'app_store_connect_fastlane_api_key.json')

# Other defines used across multiple lanes
REPOSITORY_NAME = 'WordPress-iOS'

import 'Jetpack-Fastfile'

APP_STORE_VERSION_BUNDLE_IDENTIFIER = 'org.wordpress'
EXTENSIONS_BUNDLE_IDENTIFIERS = %w[
  WordPressShare
  WordPressDraftAction
  WordPressTodayWidget
  WordPressStatsWidgets
  WordPressNotificationServiceExtension
  WordPressNotificationContentExtension
  WordPressAllTimeWidget
  WordPressThisWeekWidget
  WordPressIntents
].map { |suffix| "#{APP_STORE_VERSION_BUNDLE_IDENTIFIER}.#{suffix}" }

ALL_BUNDLE_IDENTIFIERS = [APP_STORE_VERSION_BUNDLE_IDENTIFIER, *EXTENSIONS_BUNDLE_IDENTIFIERS]

require_relative 'lanes/localization-lanes'

# Use this instead of getting values from ENV directly
# It will throw an error if the requested value is missing
def get_required_env(key)
  unless ENV.key?(key)
    UI.user_error!("Environment variable '#{key}' is not set. Have you setup #{USER_ENV_FILE_PATH} correctly?")
  end
  ENV[key]
end

before_all do |lane|
  # Skip these checks/steps for test lane (not needed for testing)
  next if lane == :test_without_building

  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']

  # Fixes weird Keychain bugs
  setup_ci

  # Check that the env files exist
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    example_path = 'fastlane/env/user.env-example '
    UI.user_error! "#{ENV_FILE_NAME} not found: Please copy #{example_path} to #{USER_ENV_FILE_PATH} and fill in the values."
  end
  unless File.file?(PROJECT_ENV_FILE_PATH)
    UI.user_error!("project.env not found at #{PROJECT_ENV_FILE_PATH}: Make sure your configuration is up to date with `rake dependencies`")
  end
end

platform :ios do
  ########################################################################
  # Environment
  ########################################################################
  Dotenv.load(USER_ENV_FILE_PATH)
  Dotenv.load(PROJECT_ENV_FILE_PATH)
  ENV[GHHELPER_REPO = 'wordpress-mobile/wordpress-iOS']
  ENV['PROJECT_NAME'] = 'WordPress'
  ENV['PUBLIC_CONFIG_FILE'] = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.Public.xcconfig')
  ENV['INTERNAL_CONFIG_FILE'] = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.internal.xcconfig')
  ENV['DOWNLOAD_METADATA'] = './fastlane/download_metadata.swift'
  ENV['PROJECT_ROOT_FOLDER'] = PROJECT_ROOT_FOLDER + '/'
  ENV['APP_STORE_STRINGS_FILE_NAME'] = 'AppStoreStrings.po'
  ENV['FL_RELEASE_TOOLKIT_DEFAULT_BRANCH'] = 'trunk'

  ########################################################################
  # Screenshots
  ########################################################################
  import './ScreenshotFastfile'

  ########################################################################
  # Release Lanes
  ########################################################################
  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the initial steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc 'Creates a new release branch from the current trunk'
  lane :code_freeze do |options|
    gutenberg_dep_check
    ios_codefreeze_prechecks(options)

    ios_bump_version_release(skip_deliver: true)
    new_version = ios_get_app_version

    release_notes_source_path = File.join(PROJECT_ROOT_FOLDER, 'RELEASE-NOTES.txt')
    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: release_notes_source_path,
      extracted_notes_file_path: extracted_release_notes_file_path(app: :wordpress)
    )
    # It would be good to update the action so that it can:
    #
    # - Use a custom commit message, so that we can differentiate between
    #   WordPress and Jetpack
    # - Have some sort of interactive mode, where the file is extracted and
    #   shown to the user and they can either confirm and let the lane commit,
    #   or modify it manually first and then run through the
    #   show-confirm-commit cycle again
    #
    # In the meantime, we can make due with a duplicated commit message and the
    # `print_release_notes_reminder` at the end of the lane to remember to make
    # updates to the files.
    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: release_notes_source_path,
      extracted_notes_file_path: extracted_release_notes_file_path(app: :jetpack)
    )
    ios_update_release_notes(new_version: new_version)

    setbranchprotection(repository: GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository: GHHELPER_REPO, milestone: new_version)
    ios_check_beta_deps(podfile: File.join(PROJECT_ROOT_FOLDER, 'Podfile'))

    print_release_notes_reminder
  end

  #####################################################################################
  # complete_code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the initial steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane complete_code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane complete_code_freeze
  # bundle exec fastlane complete_code_freeze skip_confirm:true
  #####################################################################################
  desc 'Creates a new release branch from the current trunk'
  lane :complete_code_freeze do |options|
    ios_completecodefreeze_prechecks(options)
    generate_strings_file_for_glotpress

    UI.confirm('Ready to push changes to remote and trigger the beta build?') unless ENV['RELEASE_TOOLKIT_SKIP_PUSH_CONFIRM']
    push_to_git_remote(tags: false)
    trigger_beta_build(branch_to_build: "release/#{ios_get_app_version}")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane updates the AppStoreStrings.po files with the latest content from
  # the release_notes.txt file and the other text sources
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_appstore_strings version:<release note version>
  #
  # Example:
  # bundle exec fastlane update_appstore_strings version:10.7
  #####################################################################################
  desc 'Updates the AppStoreStrings.po file with the latest data'
  lane :update_appstore_strings do |options|
    update_wordpress_appstore_strings(options)
    update_jetpack_appstore_strings(options)
  end

  #####################################################################################
  # update_wordpress_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane updates the AppStoreStrings.po files for the WordPress app with
  # the latest content from the release_notes.txt file and the other text
  # sources
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_wordpress_appstore_strings version:<release note version>
  #
  # Example:
  # bundle exec fastlane update_wordpress_appstore_strings version:10.7
  #####################################################################################
  desc 'Updates the AppStoreStrings.po file for the WordPress app with the latest data'
  lane :update_wordpress_appstore_strings do |options|
    source_metadata_folder = File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'appstoreres', 'metadata', 'source')

    files = {
      whats_new: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources', 'release_notes.txt'),
      app_store_name: File.join(source_metadata_folder, 'name.txt'),
      app_store_subtitle: File.join(source_metadata_folder, 'subtitle.txt'),
      app_store_desc: File.join(source_metadata_folder, 'description.txt'),
      app_store_keywords: File.join(source_metadata_folder, 'keywords.txt'),
      'standard-whats-new-1' => File.join(source_metadata_folder, 'standard_whats_new_1.txt'),
      'standard-whats-new-2' => File.join(source_metadata_folder, 'standard_whats_new_2.txt'),
      'standard-whats-new-3' => File.join(source_metadata_folder, 'standard_whats_new_3.txt'),
      'standard-whats-new-4' => File.join(source_metadata_folder, 'standard_whats_new_4.txt'),
      'app_store_screenshot-1' => File.join(source_metadata_folder, 'promo_screenshot_1.txt'),
      'app_store_screenshot-2' => File.join(source_metadata_folder, 'promo_screenshot_2.txt'),
      'app_store_screenshot-3' => File.join(source_metadata_folder, 'promo_screenshot_3.txt'),
      'app_store_screenshot-4' => File.join(source_metadata_folder, 'promo_screenshot_4.txt'),
      'app_store_screenshot-5' => File.join(source_metadata_folder, 'promo_screenshot_5.txt'),
      'app_store_screenshot-6' => File.join(source_metadata_folder, 'promo_screenshot_6.txt'),
      'app_store_screenshot-7' => File.join(source_metadata_folder, 'promo_screenshot_7.txt')
    }

    ios_update_metadata_source(
      po_file_path: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources', 'AppStoreStrings.po'),
      source_files: files,
      release_version: options[:version]
    )
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc 'Updates a release branch for a new beta release'
  lane :new_beta_release do |options|
    ios_betabuild_prechecks(options)
    download_localized_strings_and_metadata(options)
    # FIXME: (2021.06.17) This is disabled because we currently have a >256 chars string which GlotPress truncates when exporting  the `.strings` files,
    #   leading to incorrect key for it and (rightful) linter failure. We need to split that key into 2 smaller copies before we can re-enable this.
    # ios_lint_localizations(input_dir: 'WordPress/Resources', allow_retry: true)
    ios_bump_version_beta
    version = ios_get_app_version
    trigger_beta_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<x.y.z>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  #####################################################################################
  desc 'Creates a new hotfix branch for the given version:x.y.z. The branch will be cut from the tag x.y of the previous release'
  lane :new_hotfix_release do |options|
    prev_ver = ios_hotfix_prechecks(options)
    ios_bump_version_hotfix(
      previous_version: prev_ver,
      version: options[:version],
      skip_deliver: true
    )
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release skip_confirm:true
  #####################################################################################
  desc 'Performs the final checks and triggers a release build for the hotfix in the current branch'
  lane :finalize_hotfix_release do |options|
    ios_finalize_prechecks(options)
    version = ios_get_app_version
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # check_all_translations
  # -----------------------------------------------------------------------------------
  # This lane checks the translation progress for all the projects in GlotPress.
  #
  # By default, it will print all values. You can make it ask whether to continue when
  # if found translations that are below the threshold by passing `interactive: true`.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane check_all_translations [interactive:<interactive>]
  #
  # Example:
  # bundle exec fastlane check_all_translations
  # bundle exec fastlane check_all_translations interactive:true
  #####################################################################################
  desc 'Check translation progress for all GlotPress projects'
  lane :check_all_translations do |options|
    abort_on_violations = false
    skip_confirm = options.fetch(:interactive, false) == false

    UI.message('Checking app strings translation status...')
    check_translation_progress(
      glotpress_url: GLOTPRESS_APP_STRINGS_URL,
      abort_on_violations: abort_on_violations,
      skip_confirm: skip_confirm
    )

    UI.message('Checking WordPress release notes strings translation status...')
    check_translation_progress(
      glotpress_url: GLOTPRESS_WORDPRESS_METADATA_PROJECT_URL,
      abort_on_violations: abort_on_violations,
      skip_confirm: skip_confirm
    )

    UI.message('Checking Jetpack release notes strings translation status...')
    check_translation_progress(
      glotpress_url: GLOTPRESS_JETPACK_METADATA_PROJECT_URL,
      abort_on_violations: abort_on_violations,
      skip_confirm: skip_confirm
    )
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata, bump final version number,
  # remove branch protection and close milestone, then trigger the final release on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc 'Trigger the final release build on CI'
  lane :finalize_release do |options|
    UI.user_error!('To finalize a hotfix, please use the finalize_hotfix_release lane instead') if ios_current_branch_is_hotfix

    ios_finalize_prechecks(options)

    check_all_translations(interactive: true)

    download_localized_strings_and_metadata(options)
    # FIXME: (2021.06.17) This is disabled because we currently have a >256 chars string which GlotPress truncates when exporting  the `.strings` files,
    #   leading to incorrect key for it and (rightful) linter failure. We need to split that key into 2 smaller copies before we can re-enable this.
    # ios_lint_localizations(input_dir: 'WordPress/Resources', allow_retry: true)
    ios_bump_version_beta

    # Wrap up
    version = ios_get_app_version
    removebranchprotection(repository: GHHELPER_REPO, branch: "release/#{version}")
    setfrozentag(repository: GHHELPER_REPO, milestone: version, freeze: false)
    create_new_milestone(repository: GHHELPER_REPO)
    close_milestone(repository: GHHELPER_REPO, milestone: version)

    # Start the build
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # update_metadata_on_app_store_connect
  # -----------------------------------------------------------------------------------
  # Uploads the localized metadata tracked in the project repository to App Store
  # Connect, optionally updating screenshots, too.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_metadata_on_app_store_connect [with_screenshots:<with screenshots>]
  #
  # Example:
  # bundle exec fastlane update_metadata_on_app_store_connect
  # bundle exec fastlane update_metadata_on_app_store_connect with_screenshots:true
  #####################################################################################
  desc 'Updates the App Store Connect localized metadata'
  lane :update_metadata_on_app_store_connect do |options|
    update_wordpress_metadata_on_app_store_connect(options)
    update_jetpack_metadata_on_app_store_connect(options)
  end

  #####################################################################################
  # update_wordpress_metadata_on_app_store_connect
  # -----------------------------------------------------------------------------------
  # This lane reads the information from `fastlane/metadata/` and uploads it to
  # App Store Connect for the version specified in the version xcconfig file.
  #
  # Optionally, it can also upload new screenshots, overriding the existing ones.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_wordpress_metadata_on_app_store_connect
  #
  # Example:
  # bundle exec fastlane update_wordpress_metadata_on_app_store_connect
  # bundle exec fastlane update_wordpress_metadata_on_app_store_connect with_screenshots:true
  #####################################################################################
  desc 'Uploads the WordPress metadata to App Store Connect, localized, and optionally including screenshots.'
  lane :update_wordpress_metadata_on_app_store_connect do |options|
    # Skip screenshots by default. The naming is "with" to make it clear that
    # callers need to opt-in to adding screenshots. The naming of the deliver
    # parameter, on the other hand, uses the skip verb.
    with_screenshots = options.fetch(:with_screenshots, false)
    skip_screenshots = with_screenshots == false

    upload_to_app_store(
      **UPLOAD_TO_APP_STORE_COMMON_PARAMS,
      app_identifier: APP_STORE_VERSION_BUNDLE_IDENTIFIER,
      screenshots_path: File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'promo-screenshots'),
      skip_screenshots: skip_screenshots
    )
  end

  #####################################################################################
  # generate_strings_file_for_glotpress
  # -----------------------------------------------------------------------------------
  # Generate the `.strings` file to be imported by GlotPress,
  # by parsing source code for `NSLocalizedString` (using `genstrings` under the hood).
  #
  # Typically called by complete_code_freeze.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane generate_strings_file_for_glotpress
  #####################################################################################
  lane :generate_strings_file_for_glotpress do
    cocoapods

    wordpress_en_lproj = File.join('WordPress', 'Resources', 'en.lproj')
    ios_generate_strings_file_from_code(
      paths: ['WordPress/', 'Pods/WordPress*/', 'Pods/WPMediaPicker/', 'WordPressShared/WordPressShared/', 'Pods/Gutenberg/'],
      exclude: ['*Vendor*', 'WordPress/WordPressTest/**', '**/AppLocalizedString.swift'],
      routines: ['AppLocalizedString'],
      output_dir: wordpress_en_lproj
    )

    # Merge various manually-maintained `.strings` files into the previously generated `Localizable.strings` so their extra keys are also imported in GlotPress.
    # Note: We will re-extract the translations back during `download_localized_strings_and_metadata` (via a call to `ios_extract_keys_from_strings_files`)
    ios_merge_strings_files(
      paths_to_merge: MANUALLY_MAINTAINED_STRINGS_FILES,
      destination: File.join(wordpress_en_lproj, 'Localizable.strings')
    )

    git_commit(path: [wordpress_en_lproj], message: 'Update strings for localization', allow_nothing_to_commit: true)
  end

  #####################################################################################
  # download_localized_strings_and_metadata
  # -----------------------------------------------------------------------------------
  # Downloads localized app strings and App Store Connect metadata from GlotPress.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane download_localized_strings_and_metadata
  #####################################################################################
  desc 'Downloads localized metadata for App Store Connect from GlotPress'
  lane :download_localized_strings_and_metadata do |options|
    # Download `Localizable.strings` translations used within the app
    parent_dir_for_lprojs = File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources')
    ios_download_strings_files_from_glotpress(
      project_url: GLOTPRESS_APP_STRINGS_URL,
      locales: GLOTPRESS_TO_LPROJ_APP_LOCALE_CODES,
      download_dir: parent_dir_for_lprojs
    )

    # Then redispatch the appropriate subset of translations back to the
    # `InfoPlist.strings` and `Sites.strings` files in corresponding `*.lproj`
    # dirs
    modified_files = ios_extract_keys_from_strings_files(
      source_parent_dir: parent_dir_for_lprojs,
      target_original_files: MANUALLY_MAINTAINED_STRINGS_FILES
    )
    git_commit(path: modified_files, message: 'Update app translations', allow_nothing_to_commit: true)

    # Finally, also download the AppStore metadata (app title, keywords, etc.)
    # @FIXME: Replace this whole lane with a call to the future replacement of `gp_downloadmetadata` once it's implemented in the release-toolkit (see paaHJt-31O-p2).
    download_wordpress_localized_app_store_metadata
    download_jetpack_localized_app_store_metadata
  end

  #####################################################################################
  # download_wordpress_localized_app_store_metadata
  # -----------------------------------------------------------------------------------
  # Downloads localized metadata (intended for App Store Connect) from GlotPress for WordPress.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane download_wordpress_localized_app_store_metadata
  #####################################################################################
  desc 'Downloads localized WordPress metadata (for App Store Connect) from GlotPress'
  lane :download_wordpress_localized_app_store_metadata do
    # @FIXME: Replace this whole lane with a call to the future replacement of `gp_downloadmetadata` once it's implemented in the release-toolkit (see paaHJt-31O-p2).

    # No need to `cd` into `fastlane` because of how Fastlane manages its paths internally.
    sh './download_metadata.swift wordpress'

    # @TODO: Make the `fastlane/metadata/en-US/release_notes.txt` path be the source of truth for the original copies in the future.
    # (will require changes in the `update_appstore_strings` lane, the Release Scenario, the MC tool to generate the announcement post…)
    #
    # In the meantime, since GlotPress doesn't have the `en-US` notes because those are the ones used as originals, just copy the file to the right place for `deliver` to find
    metadata_directory = File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'metadata')
    release_notes_source = File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources', 'release_notes.txt')
    FileUtils.cp(release_notes_source, File.join(metadata_directory, 'en-US', 'release_notes.txt'))

    git_commit(
      path: Dir.glob('**/*.txt', base: metadata_directory),
      message: 'Update WordPress metadata translations',
      allow_nothing_to_commit: true
    )
  end

  #####################################################################################
  # build_and_upload_app_store_connect
  # -----------------------------------------------------------------------------------
  # This lane builds the app and uploads it for App Store Connect
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_app_store_connect [skip_confirm:<skip confirm>]
  #  [create_gh_release:<create release on GH>] [beta_release:<is a beta release>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_app_store_connect
  # bundle exec fastlane build_and_upload_app_store_connect skip_confirm:true
  # bundle exec fastlane build_and_upload_app_store_connect create_gh_release:true
  # bundle exec fastlane build_and_upload_app_store_connect beta_release:true
  #####################################################################################
  desc 'Builds and uploads for distribution to App Store Connect'
  lane :build_and_upload_app_store_connect do |options|
    ios_build_prechecks(
      skip_confirm: options[:skip_confirm],
      internal: options[:beta_release],
      external: true
    )

    ios_build_preflight

    build_and_upload_itc(
      skip_prechecks: true,
      skip_confirm: options[:skip_confirm],
      beta_release: options[:beta_release],
      create_release: options[:create_gh_release]
    )

  end

  #####################################################################################
  # build_and_upload_app_center
  # -----------------------------------------------------------------------------------
  # This lane builds the app and uploads it for App Center
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_app_center [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_app_center
  # bundle exec fastlane build_and_upload_app_center skip_confirm:true
  #####################################################################################
  desc 'Builds and uploads for distribution to App Center'
  lane :build_and_upload_app_center do |options|
    ios_build_prechecks(
      skip_confirm: options[:skip_confirm],
      internal: true,
      external: true
    )

    ios_build_preflight

    build_and_upload_internal(
      skip_prechecks: true,
      skip_confirm: options[:skip_confirm]
    )
  end

  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build [version_long:<version_long>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build
  # bundle exec fastlane build_and_upload_installable_build build_number:123
  #####################################################################################
  desc 'Builds and uploads an installable build'
  lane :build_and_upload_installable_build do |options|
    ensure_sentry_installed

    alpha_code_signing

    # Get the current build version, and update it if needed
    version_config_path = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.internal.xcconfig')
    versions = Xcodeproj::Config.new(File.new(version_config_path)).to_hash
    build_number = generate_installable_build_number
    UI.message("Updating build version to #{build_number}")
    versions['VERSION_LONG'] = build_number
    new_config = Xcodeproj::Config.new(versions)
    new_config.save_as(Pathname.new(version_config_path))

    gym(
      scheme: 'WordPress Alpha',
      workspace: WORKSPACE_PATH,
      export_method: 'enterprise',
      clean: true,
      output_directory: BUILD_PRODUCTS_PATH,
      output_name: 'WordPress Alpha',
      derived_data_path: DERIVED_DATA_PATH,
      export_team_id: ENV['INT_EXPORT_TEAM_ID'],
      export_options: { method: 'enterprise' }
    )

    appcenter_upload(
      api_token: get_required_env('APPCENTER_API_TOKEN'),
      owner_name: 'automattic',
      owner_type: 'organization',
      app_name: 'WPiOS-One-Offs',
      file: lane_context[SharedValues::IPA_OUTPUT_PATH],
      dsym: lane_context[SharedValues::DSYM_OUTPUT_PATH],
      destinations: 'All-users-of-WPiOS-One-Offs',
      notify_testers: false
    )

    sentry_upload_dsym(
      auth_token: get_required_env('SENTRY_AUTH_TOKEN'),
      org_slug: 'a8c',
      project_slug: 'wordpress-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )

    return if ENV['BUILDKITE_PULL_REQUEST'].nil?

    download_url = Actions.lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]
    UI.message("Successfully built and uploaded installable build here: #{download_url}")
    install_url = 'https://install.appcenter.ms/orgs/automattic/apps/WPiOS-One-Offs/'

    comment_body = "You can test the <strong>WordPress</strong> changes on this Pull Request by downloading it from AppCenter <a href='#{install_url}'>here</a> with build number: <code>#{build_number}</code>. IPA is available <a href='#{download_url}'>here</a>. If you need access to this, you can ask a maintainer to add you."

    comment_on_pr(
      project: 'wordpress-mobile/wordpress-ios',
      pr_number: Integer(ENV['BUILDKITE_PULL_REQUEST']),
      reuse_identifier: 'installable-build-link',
      body: comment_body
    )
  end

  #####################################################################################
  # build_and_upload_internal
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for internal testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_internal [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_internal
  # bundle exec fastlane build_and_upload_internal skip_confirm:true
  #####################################################################################
  desc 'Builds and uploads for distribution'
  lane :build_and_upload_internal do |options|
    ios_build_prechecks(skip_confirm: options[:skip_confirm], internal: true) unless options[:skip_prechecks]
    ios_build_preflight unless options[:skip_prechecks]

    ensure_sentry_installed

    internal_code_signing

    gym(
      scheme: 'WordPress Internal',
      workspace: WORKSPACE_PATH,
      export_method: 'enterprise',
      clean: true,
      output_directory: BUILD_PRODUCTS_PATH,
      output_name: 'WordPress Internal',
      derived_data_path: DERIVED_DATA_PATH,
      export_team_id: get_required_env('INT_EXPORT_TEAM_ID'),
      export_options: { method: 'enterprise' }
    )

    appcenter_upload(
      api_token: ENV['APPCENTER_API_TOKEN'],
      owner_name: 'automattic',
      owner_type: 'organization',
      app_name: 'WP-Internal',
      file: lane_context[SharedValues::IPA_OUTPUT_PATH],
      dsym: lane_context[SharedValues::DSYM_OUTPUT_PATH],
      notify_testers: false
    )

    sentry_upload_dsym(
      auth_token: get_required_env('SENTRY_AUTH_TOKEN'),
      org_slug: 'a8c',
      project_slug: 'wordpress-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )
  end

  #####################################################################################
  # build_and_upload_itc
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for external distribution
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_itc [skip_confirm:<skip confirm>] [create_release:<Create release on GH>] [beta_release:<intermediate beta?>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_itc
  # bundle exec fastlane build_and_upload_itc skip_confirm:true
  # bundle exec fastlane build_and_upload_itc create_release:true
  # bundle exec fastlane build_and_upload_itc create_release:true beta_release:true
  #####################################################################################
  desc 'Builds and uploads for distribution'
  lane :build_and_upload_itc do |options|
    ios_build_prechecks(skip_confirm: options[:skip_confirm], external: true) unless options[:skip_prechecks]
    ios_build_preflight unless options[:skip_prechecks]

    ensure_sentry_installed
    appstore_code_signing

    gym(
      scheme: 'WordPress',
      workspace: WORKSPACE_PATH,
      clean: true,
      export_team_id: get_required_env('EXT_EXPORT_TEAM_ID'),
      output_directory: BUILD_PRODUCTS_PATH,
      derived_data_path: DERIVED_DATA_PATH,
      export_options: { method: 'app-store' }
    )

    testflight(
      skip_waiting_for_build_processing: true,
      team_id: '299112',
      api_key_path: APP_STORE_CONNECT_KEY_PATH
    )

    sentry_upload_dsym(
      auth_token: get_required_env('SENTRY_AUTH_TOKEN'),
      org_slug: 'a8c',
      project_slug: 'wordpress-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )

    if options[:create_release]
      archive_zip_path = File.join(PROJECT_ROOT_FOLDER, 'WordPress.xarchive.zip')
      zip(path: lane_context[SharedValues::XCODEBUILD_ARCHIVE], output_path: archive_zip_path)

      version = options[:beta_release] ? ios_get_build_version : ios_get_app_version
      create_release(
        repository: GHHELPER_REPO,
        version: version,
        release_notes_file_path: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources', 'release_notes.txt'),
        release_assets: archive_zip_path.to_s,
        prerelease: options[:beta_release]
      )

      FileUtils.rm_rf(archive_zip_path)
    end
  end

  desc 'Build for Testing'
  lane :build_for_testing do |options|
    run_tests(
      workspace: WORKSPACE_PATH,
      scheme: 'WordPress',
      derived_data_path: DERIVED_DATA_PATH,
      build_for_testing: true,
      device: options[:device],
      deployment_target_version: options[:ios_version]
    )
  end
  #####################################################################################
  # register_new_device
  # -----------------------------------------------------------------------------------
  # This lane helps a developer register a new device in the App Store Portal
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane register_new_device
  #
  # Example:
  # bundle exec fastlane register_new_device
  #####################################################################################
  desc 'Registers a Device in the developer console'
  lane :register_new_device do |options|
    device_name = UI.input('Device Name: ') if options[:device_name].nil?
    device_id = UI.input('Device ID: ') if options[:device_id].nil?
    UI.message "Registering #{device_name} with ID #{device_id} and registering it with any provisioning profiles associated with these bundle identifiers:"
    ALL_BUNDLE_IDENTIFIERS.each do |identifier|
      puts "\t#{identifier}"
    end

    # Register the user's device
    register_device(
      name: device_name,
      udid: device_id,
      team_id: get_required_env('EXT_EXPORT_TEAM_ID')
    )

    # Add all development certificates to the provisioning profiles (just in case – this is an easy step to miss)
    add_development_certificates_to_provisioning_profiles(
      team_id: get_required_env('EXT_EXPORT_TEAM_ID'),
      app_identifier: ALL_BUNDLE_IDENTIFIERS
    )

    # Add all devices to the provisioning profiles
    add_all_devices_to_provisioning_profiles(
      team_id: get_required_env('EXT_EXPORT_TEAM_ID'),
      app_identifier: ALL_BUNDLE_IDENTIFIERS
    )
  end

  #####################################################################################
  # trigger_beta_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a beta build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_beta_build [branch_to_build:<branch_name>]
  #
  #####################################################################################
  lane :trigger_beta_build do |options|
    trigger_buildkite_release_build(branch: options[:branch_to_build], beta: true)
  end

  #####################################################################################
  # trigger_release_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a stable release build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_release_build [branch_to_build:<branch_name>]
  #
  #####################################################################################
  lane :trigger_release_build do |options|
    trigger_buildkite_release_build(branch: options[:branch_to_build], beta: false)
  end

  ########################################################################
  # Configure Lanes
  ########################################################################
  #####################################################################################
  # update_certs_and_profiles
  # -----------------------------------------------------------------------------------
  # This lane downloads all the required certs and profiles and,
  # if not run on CI it creates the missing ones.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_certs_and_profiles
  #
  # Example:
  # bundle exec fastlane update_certs_and_profiles
  #####################################################################################
  lane :update_certs_and_profiles do |_options|
    alpha_code_signing
    internal_code_signing
    appstore_code_signing
  end

  ########################################################################
  # Fastlane match code signing
  ########################################################################
  private_lane :alpha_code_signing do |_options|
    match(
      type: 'enterprise',
      team_id: get_required_env('INT_EXPORT_TEAM_ID'),
      readonly: true,
      app_identifier: ALL_BUNDLE_IDENTIFIERS.map { |id| id.sub(APP_STORE_VERSION_BUNDLE_IDENTIFIER, 'org.wordpress.alpha') }
    )
  end

  private_lane :internal_code_signing do |_options|
    match(
      type: 'enterprise',
      team_id: get_required_env('INT_EXPORT_TEAM_ID'),
      readonly: true,
      app_identifier: ALL_BUNDLE_IDENTIFIERS.map { |id| id.sub(APP_STORE_VERSION_BUNDLE_IDENTIFIER, 'org.wordpress.internal') }
    )
  end

  private_lane :appstore_code_signing do |_options|
    match(
      type: 'appstore',
      team_id: get_required_env('EXT_EXPORT_TEAM_ID'),
      readonly: true,
      app_identifier: ALL_BUNDLE_IDENTIFIERS
    )
  end

  ########################################################################
  # Test Lanes
  ########################################################################
  #####################################################################################
  # test_without_building
  # -----------------------------------------------------------------------------------
  # This lane runs tests without building the app.
  # It requires a prebuilt xctestrun file and simulator destination where the tests will be run.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane test_without_building [name:<Partial name of the .xctestrun file>]
  #
  # Example:
  # bundle exec fastlane test_without_building name:UITests
  #####################################################################################
  desc 'Run tests without building'
  lane :test_without_building do |options|
    # Find the referenced .xctestrun file based on its name
    build_products_path = File.join(DERIVED_DATA_PATH, 'Build', 'Products')

    test_plan_path = Dir.glob(File.join(build_products_path, '*.xctestrun')).select do |e|
      e.include?(options[:name])
    end.first

    unless !test_plan_path.nil? && File.exist?((test_plan_path))
      UI.user_error!("Unable to find .xctestrun file at #{build_products_path}")
    end

    run_tests(
      workspace: WORKSPACE_PATH,
      scheme: 'WordPress',
      device: options[:device],
      deployment_target_version: options[:ios_version],
      ensure_devices_found: true,
      test_without_building: true,
      xctestrun: test_plan_path,
      output_directory: File.join(PROJECT_ROOT_FOLDER, 'build', 'results'),
      reset_simulator: true,
      result_bundle: true
    )
  end

########################################################################
# Helper Lanes
########################################################################
  desc 'Verifies that Gutenberg is referenced by release version and not by commit'
  lane :gutenberg_dep_check do |_options|
    res = ''

    File.open File.join(PROJECT_ROOT_FOLDER, 'Podfile') do |file|
      res = file.find { |line| line =~ /^(?!\s*#)(?=.*\bgutenberg\b).*(\bcommit|tag\b){1}.+/ }
    end

    UI.user_error!("Can't find any reference to Gutenberg!") if res.empty?
    if res.include?('commit')
      UI.user_error!("Gutenberg referenced by commit!\n#{res}") unless UI.interactive?

      unless UI.confirm("Gutenberg referenced by commit!\n#{res}\nDo you want to continue anyway?")
        UI.user_error!('Aborted by user request. Please fix Gutenberg reference and try again.')
      end
    end

    UI.message("Gutenberg version: #{(res.scan(/'([^']*)'/))[0][0]}")
  end
end

def extracted_release_notes_file_path(app:)
  paths = {
    wordpress: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Resources', 'release_notes.txt'),
    jetpack: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Jetpack', 'Resources', 'release_notes.txt')
  }
  paths[app.to_sym] || UI.user_error!("Invalid app name passed to lane: #{app}")
end

def print_release_notes_reminder
  message = <<~MSG
    The extracted release notes for WordPress and Jetpack were based on the same source.
    Don't forget to remove any item that doesn't apply to the respective app before editorialization.

    You can find the extracted notes at:

    - #{extracted_release_notes_file_path(app: :wordpress)}
    - #{extracted_release_notes_file_path(app: :jetpack)}
  MSG

  message.lines.each { |l| UI.important(l.chomp) }
end

# FIXME: This ought to be extracted into the release toolkit, ideally in an
# configurable way but with smart defaults.
#
# See discussion here
# https://github.com/wordpress-mobile/WordPress-iOS/pull/16805/files/5f3009c5e0d01448cf0369656dddc1fe3757e45f#r664069046
def read_version_from_config
  fastlane_require 'Xcodeproj'

  # If the file is not available, the method will raise so we should be fine
  # not handling that case. We'll never return an empty string.
  File.open(File.join(PROJECT_ROOT_FOLDER, 'Config', 'Version.public.xcconfig')) do |config|
    configuration = Xcodeproj::Config.new(config)
    configuration.attributes['VERSION_SHORT']
  end
end

def ensure_sentry_installed
  # This is an action provided by the Sentry Fastlane plugin that verifies the
  # CLI is installed and its version is compatible with the plugin's
  # expectation.
  sentry_check_cli_installed
end

# This function is Buildkite-specific
def generate_installable_build_number

  if ENV['BUILDKITE']
    commit = ENV['BUILDKITE_COMMIT'][0,7]
    branch = ENV['BUILDKITE_BRANCH']
    pr_num = ENV['BUILDKITE_PULL_REQUEST']

    return pr_num == 'false' ? "#{branch}-#{commit}" : "pr#{pr_num}-#{commit}"
  else
    repo = Git.open(PROJECT_ROOT_FOLDER)
    commit = repo.current_branch
    branch = repo.revparse('HEAD')[0, 7]

    return "#{branch}-#{commit}"
  end
end

def trigger_buildkite_release_build(branch:, beta:)
  buildkite_trigger_build(
    buildkite_organization: 'automattic',
    buildkite_pipeline: 'wordpress-ios',
    branch: branch,
    environment: { BETA_RELEASE: beta },
    pipeline_file: 'release-builds.yml'
  )
end

# Application-agnostic settings for the `upload_to_app_store` action, also
# known as `deliver`.
UPLOAD_TO_APP_STORE_COMMON_PARAMS = {
  app_version: read_version_from_config,
  skip_binary_upload: true,
  overwrite_screenshots: true,
  phased_release: true,
  precheck_include_in_app_purchases: false,
  api_key_path: APP_STORE_CONNECT_KEY_PATH,
  app_rating_config_path: File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'metadata', 'ratings_config.json')
}
