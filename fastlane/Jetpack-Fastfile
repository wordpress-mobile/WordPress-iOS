# frozen_string_literal: true

APP_IDENTIFIER = 'com.automattic.jetpack'

  #####################################################################################
  # build_and_upload_installable_build
  # -----------------------------------------------------------------------------------
  # This lane builds the app and upload it for adhoc testing
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_installable_build [version_long:<version_long>]
  #
  # Example:
  # bundle exec fastlane build_and_upload_installable_build
  # bundle exec fastlane build_and_upload_installable_build build_number:123
  #####################################################################################
  desc "Builds and uploads a Jetpack installable build"
  lane :build_and_upload_jetpack_installable_build do | options |
    jetpack_alpha_code_signing

    # Get the current build version, and update it if needed
    version_config_path = File.join(PROJECT_ROOT_FOLDER, "config", "Version.internal.xcconfig")
    versions = Xcodeproj::Config.new(File.new(version_config_path)).to_hash

    build_number = Time.new.strftime("%Y-%m-%d-%H")
    UI.message("Updating build version to #{build_number}")

    versions["VERSION_SHORT"] = "0.1"
    versions["VERSION_LONG"] = build_number
    new_config = Xcodeproj::Config.new(versions)
    new_config.save_as(Pathname.new(version_config_path))

    gym(
      scheme: "Jetpack",
      workspace: WORKSPACE_PATH,
      export_method: "enterprise",
      configuration: "Release-Alpha",
      clean: true,
      output_directory: BUILD_PRODUCTS_PATH,
      output_name: "Jetpack Alpha",
      derived_data_path: DERIVED_DATA_PATH,
      export_team_id: ENV["INT_EXPORT_TEAM_ID"],
      export_options: { method: "enterprise" }
    )

    appcenter_upload(
      api_token: get_required_env("APPCENTER_API_TOKEN"),
      owner_name: "automattic",
      owner_type: "organization",
      app_name: "jetpack-installable-builds",
      file: lane_context[SharedValues::IPA_OUTPUT_PATH],
      dsym: lane_context[SharedValues::DSYM_OUTPUT_PATH],
      destinations: "Collaborators",
      notify_testers: false
    )

    # Install SentryCLI prior to trying to upload dSYMs
    sh("curl -sL https://sentry.io/get-cli/ | bash") unless sh("which sentry-cli")

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'jetpack-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH],
    )
  end

  desc "Build for Testing"
  lane :build_jetpack_for_testing do | options |
    run_tests(
      workspace: WORKSPACE_PATH,
      scheme: "Jetpack",
      derived_data_path: DERIVED_DATA_PATH,
      build_for_testing: true,
      deployment_target_version: options[:ios_version],
    )
  end

  desc "Build for TestFlight"
  lane :build_and_upload_jetpack_for_app_store do |options|

    jetpack_appstore_code_signing

    gym(
      scheme: "Jetpack",
      workspace: WORKSPACE_PATH,
      clean: true,
      export_team_id: get_required_env("EXT_EXPORT_TEAM_ID"),
      output_directory: BUILD_PRODUCTS_PATH,
      derived_data_path: DERIVED_DATA_PATH,
      export_options: { method: "app-store" }
    )

    testflight(
      skip_waiting_for_build_processing: true,
      team_id: "299112",
      api_key_path: APP_STORE_CONNECT_KEY_PATH
    )

    sentry_upload_dsym(
      auth_token: get_required_env("SENTRY_AUTH_TOKEN"),
      org_slug: 'a8c',
      project_slug: 'jetpack-ios',
      dsym_path: lane_context[SharedValues::DSYM_OUTPUT_PATH]
    )

  end

#####################################################################################
# update_jetpack_appstore_strings
# -----------------------------------------------------------------------------------
# This lane updates the AppStoreStrings.po files for the Jetpack app with
# the latest content from the release_notes.txt file and the other text
# sources
# -----------------------------------------------------------------------------------
# Usage:
# bundle exec fastlane update_jetpack_appstore_strings version:<release note version>
#
# Example:
# bundle exec fastlane update_jetpack_appstore_strings version:10.7
#####################################################################################
desc 'Updates the AppStoreStrings.po file for the Jetpack app with the latest data'
lane :update_jetpack_appstore_strings do |options|
  source_metadata_folder = File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'appstoreres', 'jetpack_metadata', 'source')

  files = {
    whats_new: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Jetpack', 'Resources', 'release_notes.txt'),
    app_store_subtitle: File.join(source_metadata_folder, 'subtitle.txt'),
    app_store_desc: File.join(source_metadata_folder, 'description.txt'),
    app_store_keywords: File.join(source_metadata_folder, 'keywords.txt'),
    'screenshot-text-1' => File.join(source_metadata_folder, 'promo_screenshot_1.txt'),
    'screenshot-text-2' => File.join(source_metadata_folder, 'promo_screenshot_2.txt'),
    'screenshot-text-3' => File.join(source_metadata_folder, 'promo_screenshot_3.txt'),
    'screenshot-text-4' => File.join(source_metadata_folder, 'promo_screenshot_4.txt'),
    'screenshot-text-5' => File.join(source_metadata_folder, 'promo_screenshot_5.txt'),
    'screenshot-text-6' => File.join(source_metadata_folder, 'promo_screenshot_6.txt'),
    'app-store-name' => File.join(source_metadata_folder, 'app_name.txt')
  }

  ios_update_metadata_source(
    po_file_path: File.join(PROJECT_ROOT_FOLDER, 'WordPress', 'Jetpack', 'Resources', 'AppStoreStrings.po'),
    source_files: files,
    release_version: options[:version]
  )
end

#####################################################################################
# download_jetpack_localized_metadata
# -----------------------------------------------------------------------------------
# Downloads localized metadata for App Store Connect from GlotPress.
# -----------------------------------------------------------------------------------
# Usage:
# bundle exec fastlane download_localized_metadata
#####################################################################################
desc 'Downloads localized metadata for App Store Connect from GlotPress'
lane :download_jetpack_localized_app_store_metadata do
  # No need to `cd` into `fastlane` because of how Fastlane manages its paths
  # internally.
  sh './download_metadata.swift jetpack'

  jetpack_metadata_glob = File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'jetpack_metadata/**/*.txt')

  no_files_changed = sh "git status #{jetpack_metadata_glob}" do |_, output, _|
    output.include? 'nothing to commit'
  end

  if no_files_changed
    UI.message "No translations downloaded into #{jetpack_metadata_glob}. Moving on."
  else
    sh "git add #{jetpack_metadata_glob}"
    git_commit(
      path: jetpack_metadata_glob,
      message: 'Update Jetpack metadata translations'
    )
  end
end

#####################################################################################
# update_jetpack_metadata_on_app_store_connect
# -----------------------------------------------------------------------------------
# This lane reads the information from `fastlane/jetpack_metadata/` and uploads it to
# App Store Connect for the version specified in the version xcconfig file.
#
# Optionally, it can also upload new screenshots, overriding the existing ones.
# -----------------------------------------------------------------------------------
# Usage:
# bundle exec fastlane update_jetpack_metadata_on_app_store_connect
#
# Example:
# bundle exec fastlane update_jetpack_metadata_on_app_store_connect
# bundle exec fastlane update_jetpack_metadata_on_app_store_connect with_screenshots:true
#####################################################################################
desc 'Uploads the Jetpack metadata to App Store Connect, localized, and optionally including screenshots.'
lane :update_jetpack_metadata_on_app_store_connect do |options|
  # Skip screenshots by default. The naming is "with" to make it clear that
  # callers need to opt-in to adding screenshots. The naming of the deliver
  # parameter, on the other hand, uses the skip verb.
  with_screenshots = options.fetch(:with_screenshots, false)
  skip_screenshots = with_screenshots == false

  upload_to_app_store(
    **UPLOAD_TO_APP_STORE_COMMON_PARAMS,
    app_identifier: APP_IDENTIFIER,
    metadata_path: File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'jetpack_metadata'),
    screenshots_path: File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'jetpack_promo_screenshots'),
    skip_screenshots: skip_screenshots
  )
end

########################################################################
# Jetpack Fastlane match code signing
########################################################################
private_lane :jetpack_alpha_code_signing do |options|
  match(
    type: "enterprise",
    team_id: get_required_env("INT_EXPORT_TEAM_ID"),
    readonly: true,
    app_identifier: "com.jetpack.alpha"
  )
end

private_lane :jetpack_internal_code_signing do |options|
  match(
    type: "enterprise",
    team_id: get_required_env("INT_EXPORT_TEAM_ID"),
    readonly: true,
    app_identifier: "com.jetpack.internal"
  )
end

private_lane :jetpack_appstore_code_signing do |options|
  match(
    type: "appstore",
    team_id: get_required_env("EXT_EXPORT_TEAM_ID"),
    readonly: true,
    app_identifier: APP_IDENTIFIER
  )
end

